! -----------------------------------------------------------------------------
! Parallax - Intro Level
! Need initial story text, but I'll deal with that later.
! The office building will eventually be in a weird little town (think Gravity Falls), but for now it'll just be where we go first.
! -----------------------------------------------------------------------------
! Dirt Road Area
! -----------------------------------------------------------------------------

Room Init "DEAD END" with
    description
        "You are at the dead end of a dirt road. Off in the distance to the north, you can see a few buildings, maybe the edge of a town.",
    n_to DirtRoad;

Object -> Lamp "portable lamp" with
    name
        'lamp' 'torch' 'lantern' 'light',
    initial
        "There is a small handheld lamp nearby.",
    description [;
        if (self.location hasnt light)
            "The lamp gives off a soft glow.";
        "The lamp feels light enough, but the rust is starting to rub off and make your hand smell funny.";
    ],
    before [;
        SwitchOn:
            if (self hasnt visited) {
                give self visited;
                "You clean the lamp as best as you can on your sleeve, but it doesn't seem to help too much.^^";
                    }
        Examine:
            if (self hasnt visited)
                "The lamp looks pretty old. It must have been sitting here for a long time -- its glass is covered in a thick layer of dirt.";
            if (self has on)
                    self.description();
            "The lamp is currently off.";
        ThrowAt:
            if ((second == Peacock)) {
                print "You miss by a wide margin, but it's enough to scare the peacock off.^";
                move Peacock to thedark;
                rtrue;
            }
    ],
    after [;
        SwitchOn:
            give self light on;
        SwitchOff:
            give self ~light ~on;
    ],
has switchable;



Room DirtRoad "DIRT ROAD" with
    description
        "You are on a dirt road. There's an ordinary office building to the north. You can also go back south, to the dead end.",
    before [;
        Go: if (KeyCard has scenery)
            KeyCard.cant_go();
    ],
    after [;
        Enter:
            if (OfficeDoor has open)
                give OfficeDoor ~open locked;
                "The door locks behind you.";
    ],
    n_to OfficeDoor,
    s_to Init;

Object -> KeyCard "keycard" with
    name 'keycard' 'key' 'card',
    description [;
        print "The keycard doesn't seem to have any identifying markings.";
        if (ExecOffice hasnt visited)
            "But it stands to reason that it might belong to someone who works in that office.";
        rtrue;
    ],
    before [;
        Take:
            give self ~scenery;
        Drop:
            "You're gonna need that, y'know.";
    ],
    cant_go [;
        "Hey, do you see that keycard by the side of the road?";
    ],
has scenery;


! -----------------------------------------------------------------------------
! Office building
! We actually might not know that we're in an executive office? I'll call it that anyway for now.
! -----------------------------------------------------------------------------
Object OfficeDoor "door" with
    name
        'door',
    with_key KeyCard,
    before [;
        Open:
            if (KeyCard in player) rfalse;
            if (player in DirtRoad)
                KeyCard.cant_go();
            print "The door emits a steady beep, and the light turns green.";
            rfalse;
    ],
    when_closed
        "A steady red light glows from above the door's handle.",
    found_in
        DirtRoad OfficeEntry,
    door_to [;
        if (player in DirtRoad)
            return OfficeEntry;
        return OfficeSpace;
    ],
    door_dir [;
        if (player in DirtRoad)
            return n_to;
        return e_to;
    ],
has static door openable lockable locked;


Room OfficeEntry "Office Building" with
    name
        'building' 'office',
    description [;
        give OfficeDoor ~open;
        "You are in the main entrance of an office building. It looks like no one's been here in a while. The office door is to the east. You can also go back south.";
    ],
    s_to DirtRoad,
    e_to OfficeDoor;


Room OfficeSpace "Main Office Floor" with
    description
        "You are in the main area of an office building.^^
        A door to the west leads back to the entryway. There is a door to the north, and a set of stairs leads to the second floor.",
    before [;
        Go:         if ((noun == u_obj) || (second == u_obj)) {
                        if (PrinterRoom hasnt visited)
                            "Do you hear that... squawking?^
                            Whatever it is, it sounds like it's coming from the room to the north.";
                        else {
                            if (Printout has concealed)
                                "The noise continues from the printer room. It's probably worth investigating.";
                            if (~~(Printout in Player))
                                "Hey, that printout might have been important.";
                        }
                    }
    ],
    w_to OfficeEntry,
    n_to PrinterRoom,
    u_to ExecOffice;

Room PrinterRoom "Printer Room" with
    description
        "You are in a printer room.^^
        The main office space is to the south of you.",
        s_to OfficeSpace;

Object -> Printer "dot matrix printer" with
    name
        'dot' 'matrix' 'printer',
    initial [;
        print "A dusty dot matrix printer sits in the corner, forlorn.^^";
        if (Peacock in PrinterRoom)
            "There is an angry peacock here!";
    ],
    description
        "The printer looks like it hasn't been used in roughly thirty-nine years... give or take.",
    before [;
        Examine:    if (Peacock in PrinterRoom) {
                        if (Peacock has visited)
                            "The peacock seems quite agitated, and doesn't seem to want to let you get a good look at it.";
                        
                    }
    ],
has static supporter;

! initial description doesn't print until after we're allowed to examine the printer
! description routine needs to be different between when it's still on the printer and when it's in your possession
! and yeah yeah I know, reindeer flotilla is a little played out, fight me
Object -> -> Printout "paper printout" with
    name
        'paper' 'printout' 'print',
    description [;
        if (self in Printer) {
            print "The paper smells kind of musty.^";
        }
        "The paper has three lines on it:^
        Your initials^
        reindeerflotilla^
        C212";
    ],
    before [;
        Examine:    if ((self in Printer) && (Peacock in PrinterRoom))
                        "The peacock's in your way, and looks pretty angry.";
        Take:   if (self in Printer)
                    print "The paper tears at the perforation with a very satisfying sound.^";
    ],
    after [;
        Take:   "You tuck the printout into your bag.";
    ];
